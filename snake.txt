#include <Arduino.h>
#include <stdlib.h>

//IO配置
#define LEDARRAY_D 2
#define LEDARRAY_C 3
#define LEDARRAY_B 4
#define LEDARRAY_A 5
#define LEDARRAY_G 6
#define LEDARRAY_DI 7
#define LEDARRAY_CLK 8
#define LEDARRAY_LAT 9

#define KEY_Right 11			//右
#define KEY_Down 13			//下
#define KEY_Left 10			//左
#define KEY_Up 12			//上

#define Right 0
#define Left 2
#define Up 3
#define Down 1



unsigned char Display_Buffer[2];

unsigned char table[31]={0x00,0x10,0x20};
unsigned char count = 3;
unsigned char Direction;
unsigned char T;
int tt;
unsigned char Flag_Shift,Flag_Over,flag3,Flag_Dot,Flag_Draw;
unsigned char u;

void setup()
{
	pinMode(LEDARRAY_D, OUTPUT); 
	pinMode(LEDARRAY_C, OUTPUT);
	pinMode(LEDARRAY_B, OUTPUT);
	pinMode(LEDARRAY_A, OUTPUT);
	pinMode(LEDARRAY_G, OUTPUT);
	pinMode(LEDARRAY_DI, OUTPUT);
	pinMode(LEDARRAY_CLK, OUTPUT);
	pinMode(LEDARRAY_LAT, OUTPUT);

	pinMode(KEY_Right, INPUT);
	pinMode(KEY_Left, INPUT);
	pinMode(KEY_Up, INPUT);
	pinMode(KEY_Down, INPUT);

	Init();
}

void loop()
{
	if (Flag_Dot == 1)			//开启按键按下
		Random_Dot();			//随即显示一个点
	if (Flag_Shift == 1)		
		Shift();				//贪食蛇移动		
	Scan_Key();
	Display();

}


//**********************************************************
//定时器中断
//**********************************************************
ISR(TIMER1_COMPA_vect) //这是定义好的定时器1比较中断
{
	T++;
	if (T>=10)
	{
		T=0;
		Flag_Shift=1;
	}		

}

//**********************************************************
//移动
//**********************************************************
void Shift()
{
	int k;

	if ( Flag_Draw == 1 )
	{
		for(k=0;k<count-1;k++)				//绘制蛇身
		{
			table[k]=table[k+1];
		}
	}
	
	switch (Direction)
	{
		case 0:							//向右
			if (table[count-1]/16<15)				//蛇头没有超过右边框
				table[count-1]=table[count-1]+16;	//右移
			else
				Flag_Over=1;							//蛇头超过边框，游戏结束
			break;
		case 1:							//向下
			if (table[count-1]%16<15)
				table[count-1]=table[count-1]+1;
			else
				Flag_Over=1;
			break;
		case 2:							//向左
			if (table[count-1]/16>0)
				table[count-1]=table[count-1]-16;
			else
				Flag_Over=1;
			break;
		case 3:							//向上
			if (table[count-1]%16>0)
				table[count-1]=table[count-1]-1;
			else
				Flag_Over=1;
			break;
		default:
			break;
	}
	Flag_Shift=0;
	if (Flag_Over == 0)
	{
		for (k=0;k<count-1;k++)							//判断是否蛇头碰撞到蛇身
		{
			if (table[count-1]==table[k])
			{
				Flag_Over=1;
				break;
			}
		}
	}
	if (Flag_Over == 1)
	{ 
		cli();
		Flag_Dot = 2;
		ReInit();					//重现开始游戏
	}
	else if (table[count-1]==table[count])		//蛇头 碰到 食物
	{
		if (count<30)							
		{
			count++;							//蛇身长度+1
			Flag_Draw=0;
		}
		Flag_Dot=1;
		table[count]=0x00;						//新的食物的坐标在没随机前，不显示
	}
	else
	{
		Flag_Draw=1;
	}


}

//**********************************************************
//随即函数
//**********************************************************
void Random_Dot()
{
	int k;
	Flag_Dot=0;
	randomSeed(analogRead(0));
	do
	{
		flag3=1;
		u=random(256);				//取出0-255中的任意一个值
		u=u/16*10+u%16;				//取出随即点的行号放高4位，列号放低4位
		for (k=0;k<count;k++)		//查询射身与随即点是否重合
		{
			if (u==table[k])		//假如有重合，重新随即
			{
				flag3=0;
				break;
			}
		}
	}
	while(!flag3);					//假如flag3 == 1跳出循环，如果为0则重新随即点
	table[count]=u;					//取出随即点的值放在table[count]中
}

void Init_time()
{
    cli();          // disable global interrupts
    TCCR1A = 0;     // set entire TCCR1A register to 0
    TCCR1B = 0;     // same for TCCR1B
 
    // set compare match register to desired timer count:
    OCR1A = 781;					//20ms
									//15624  1S
    // turn on CTC mode:
    TCCR1B |= (1 << WGM12);
    // Set CS10 and CS12 bits for 1024 prescaler:
    TCCR1B |= (1 << CS10);
    TCCR1B |= (1 << CS12);
    // enable timer compare interrupt:
    TIMSK1 |= (1 << OCIE1A);
    //sei();          // enable global interrupts
}

//**********************************************************
//重新初始化
//**********************************************************
void ReInit()
{	
	table[0]=0x00;
	table[1]=0x10;
	table[2]=0x20;
	delay(500);
	Flag_Over=0;
	Flag_Dot=2;
	Flag_Draw=1;
	count=3;
	table[count]=0;
	Flag_Shift=0;

	Direction=0;
	

	Init_time();
}
//**********************************************************
//初始化
//**********************************************************
void Init()
{
	Flag_Shift=0;
	Flag_Draw=1;
	Flag_Dot=2;
	tt=0;
	T=0;
	Flag_Over=0;

	count=3;					//蛇身长度为3	
	Direction=0;						//方向
	Init_time();
}

//**********************************************************
//按键扫描
//**********************************************************
void Scan_Key()
{
	if(digitalRead(KEY_Right) == 0)
	{
		if (Flag_Dot==2)
		{
			Flag_Dot=1;			//启动游戏
			sei();				//开启中断，开始移动
		}
		if(Direction != Left)
			Direction = Right;
			
	}

	if(digitalRead(KEY_Down) == 0)
	{
		if(Direction != Up)
		Direction = Down;	
	}

	if(digitalRead(KEY_Left) == 0)
	{
		if(Direction != Right)
		Direction = Left;
	
	}

	if(digitalRead(KEY_Up) == 0)
	{
		if(Direction != Down)
		Direction = Up;	
	}
}



//************************************************************
//显示
//*************************************************************
void Display()					
{
	unsigned char i,j;
	unsigned int temp = 0x7fff;
	unsigned char x,y;

	for( j = 0 ; j <= count ; j++ )
	{
		digitalWrite(LEDARRAY_G, HIGH);			//更新数据时候关闭显示。等更新完数据，打开138显示行。防止重影。

		y=table[j]/16;				//高4位放列值，  行值：0 = 选通  1 = 不选
		x=table[j]%16;				//低4位放行值，  列值：1 = 选通  0 = 不选


		temp = 0x7fff;		
		for(i = 0 ; i < y ; i++)
		{
			temp = (temp>>1)|0x8000;
		} 

		Display_Buffer[1] = temp&0x00ff;
		Display_Buffer[0] = (temp>>8)&0x00ff;
				
		Send(Display_Buffer[1]);
		Send(Display_Buffer[0]);

		digitalWrite(LEDARRAY_LAT, HIGH);					//锁存数据
		delayMicroseconds(1);
	
		
		digitalWrite(LEDARRAY_LAT, LOW);
		delayMicroseconds(1);

		Scan_Line(x);						//选择第i行

		digitalWrite(LEDARRAY_G, LOW);
		
		delayMicroseconds(300);;		//延时一段时间，让LED亮起来			
	}
}

//****************************************************
//扫描某一行
//****************************************************
void Scan_Line( unsigned char m)
{	
	switch(m)
	{
		case 0:			
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW); 					
			break;
		case 1:					
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 2:					
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 3:					
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 4:
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 5:
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 6:
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 7:
			digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 8:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 9:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH); 		
			break;	
		case 10:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 11:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 12:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 13:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		case 14:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW); 		
			break;
		case 15:
			digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH); 		
			break;
		default : break;	
	}
}

//****************************************************
//发送数据
//****************************************************
void Send( unsigned char dat)
{
	unsigned char i;
	digitalWrite(LEDARRAY_CLK, LOW);
	delayMicroseconds(1);;	
	digitalWrite(LEDARRAY_LAT, LOW);
	delayMicroseconds(1);;

	for( i = 0 ; i < 8 ; i++ )
	{
		if( dat&0x01 )
		{
			digitalWrite(LEDARRAY_DI, HIGH);	
		}
		else
		{
			digitalWrite(LEDARRAY_DI, LOW);
		}


		digitalWrite(LEDARRAY_CLK, HIGH);				//上升沿发送数据
			delayMicroseconds(1);;
		digitalWrite(LEDARRAY_CLK, LOW);
			delayMicroseconds(1);;		
		dat >>= 1;
			
	}			
}
